{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/firestore/v1/DocumentEventData.json",
  "name": "DocumentEventData",
  "examples": [
    "https://googleapis.github.io/google-cloudevents/testdata/google/events/cloud/firestore/v1/DocumentEventData-complex.json",
    "https://googleapis.github.io/google-cloudevents/testdata/google/events/cloud/firestore/v1/DocumentEventData-simple.json"
  ],
  "package": "google.events.cloud.firestore.v1",
  "datatype": "google.events.cloud.firestore.v1.DocumentEventData",
  "cloudeventTypes": [
    "google.cloud.firestore.document.v1.created",
    "google.cloud.firestore.document.v1.updated",
    "google.cloud.firestore.document.v1.deleted",
    "google.cloud.firestore.document.v1.written"
  ],
  "product": "Cloud Firestore",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/DocumentEventData",
  "definitions": {
    "DocumentEventData": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Document",
          "additionalProperties": true,
          "description": "A Document object containing a post-operation document snapshot. This is not populated for delete events."
        },
        "oldValue": {
          "$ref": "#/definitions/Document",
          "additionalProperties": true,
          "description": "A Document object containing a pre-operation document snapshot. This is only populated for update and delete events."
        },
        "updateMask": {
          "$ref": "#/definitions/DocumentMask",
          "additionalProperties": true,
          "description": "A DocumentMask object that lists changed fields. This is only populated for update events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Document Event Data",
      "description": "The data within all Firestore document events."
    },
    "ArrayValue": {
      "properties": {
        "values": {
          "items": {
            "$ref": "#/definitions/Value"
          },
          "type": "array",
          "description": "Values in the array."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Array Value",
      "description": "An array value."
    },
    "Document": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`"
        },
        "fields": {
          "additionalProperties": {
            "$ref": "#/definitions/Value",
            "additionalProperties": true
          },
          "type": "object",
          "description": "The document's fields. The map keys represent field names. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by the simple or quoted field names of the containing fields, delimited by `.`. For example, the structured field `\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be represented by the field path `foo.x&y`. Within a field path, a quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\\`. For example, `` `x&y` `` represents `x&y` and `` `bak\\`tik` `` represents `` bak`tik ``."
        },
        "createTime": {
          "type": "string",
          "description": "The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.",
          "format": "date-time"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Document",
      "description": "A Firestore document."
    },
    "DocumentMask": {
      "properties": {
        "fieldPaths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of field paths in the mask. See [Document.fields][google.cloud.firestore.v1.events.Document.fields] for a field path syntax reference."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Document Mask",
      "description": "A set of field paths on a document."
    },
    "MapValue": {
      "properties": {
        "fields": {
          "additionalProperties": {
            "$ref": "#/definitions/Value",
            "additionalProperties": true
          },
          "type": "object",
          "description": "The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Map Value",
      "description": "A map value."
    },
    "Value": {
      "properties": {
        "nullValue": {
          "enum": [
            "NULL_VALUE",
            0
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Null Value",
          "description": "`NullValue` is a singleton enumeration to represent the null value for the `Value` type union.  The JSON representation for `NullValue` is JSON `null`."
        },
        "booleanValue": {
          "type": "boolean",
          "description": "A boolean value."
        },
        "integerValue": {
          "type": "integer",
          "description": "An integer value."
        },
        "doubleValue": {
          "type": "number",
          "description": "A double value."
        },
        "timestampValue": {
          "type": "string",
          "description": "A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.",
          "format": "date-time"
        },
        "stringValue": {
          "type": "string",
          "description": "A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries."
        },
        "bytesValue": {
          "type": "string",
          "description": "A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "referenceValue": {
          "type": "string",
          "description": "A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`."
        },
        "geoPointValue": {
          "$ref": "#/definitions/LatLng",
          "additionalProperties": true,
          "description": "A geo point value representing a point on the surface of Earth."
        },
        "arrayValue": {
          "$ref": "#/definitions/ArrayValue",
          "additionalProperties": true,
          "description": "An array value. Cannot directly contain another array value, though can contain an map which contains another array."
        },
        "mapValue": {
          "$ref": "#/definitions/MapValue",
          "additionalProperties": true,
          "description": "A map value."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Value",
      "description": "A message that can hold any of the supported value types."
    },
    "LatLng": {
      "properties": {
        "latitude": {
          "type": "number",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
        },
        "longitude": {
          "type": "number",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Lat Lng",
      "description": "An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the <a href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\">WGS84 standard</a>. Values must be within normalized ranges."
    }
  }
}