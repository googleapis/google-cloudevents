{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/cloudbuild/v1/BuildEventData.json",
  "name": "BuildEventData",
  "examples": [
    "https://googleapis.github.io/google-cloudevents/testdata/google/events/cloud/cloudbuild/v1/BuildEventData-complex.json",
    "https://googleapis.github.io/google-cloudevents/testdata/google/events/cloud/cloudbuild/v1/BuildEventData-simple.json"
  ],
  "package": "google.events.cloud.cloudbuild.v1",
  "datatype": "google.events.cloud.cloudbuild.v1.BuildEventData",
  "cloudeventTypes": [
    "google.cloud.cloudbuild.build.v1.statusChanged"
  ],
  "product": "Cloud Build",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/BuildEventData",
  "definitions": {
    "BuildEventData": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the build."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project."
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            0,
            "QUEUED",
            1,
            "WORKING",
            2,
            "SUCCESS",
            3,
            "FAILURE",
            4,
            "INTERNAL_ERROR",
            5,
            "TIMEOUT",
            6,
            "CANCELLED",
            7,
            "EXPIRED",
            9
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Status",
          "description": "Possible status of a build or build step."
        },
        "statusDetail": {
          "type": "string",
          "description": "Customer-readable message about the current status."
        },
        "source": {
          "$ref": "#/definitions/Source",
          "additionalProperties": true,
          "description": "The location of the source files to build."
        },
        "steps": {
          "items": {
            "$ref": "#/definitions/BuildStep"
          },
          "type": "array",
          "description": "The operations to be performed on the workspace."
        },
        "results": {
          "$ref": "#/definitions/Results",
          "additionalProperties": true,
          "description": "Results of the build."
        },
        "createTime": {
          "type": "string",
          "description": "Time at which the request to create the build was received.",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "description": "Time at which execution of the build was started.",
          "format": "date-time"
        },
        "finishTime": {
          "type": "string",
          "description": "Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "format": "date-time"
        },
        "timeout": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`.",
          "format": "regex"
        },
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`."
        },
        "queueTtl": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "format": "regex"
        },
        "artifacts": {
          "$ref": "#/definitions/Artifacts",
          "additionalProperties": true,
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`."
        },
        "sourceProvenance": {
          "$ref": "#/definitions/SourceProvenance",
          "additionalProperties": true,
          "description": "A permanent fixed identifier for source."
        },
        "buildTriggerId": {
          "type": "string",
          "description": "The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically."
        },
        "options": {
          "$ref": "#/definitions/BuildOptions",
          "additionalProperties": true,
          "description": "Special options for this build."
        },
        "logUrl": {
          "type": "string",
          "description": "URL to logs for this build in Google Cloud Console."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions data for `Build` resource."
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Tags for annotation of a `Build`. These are not docker tags."
        },
        "secrets": {
          "items": {
            "$ref": "#/definitions/Secret"
          },
          "type": "array",
          "description": "Secrets to decrypt using Cloud Key Management Service."
        },
        "timing": {
          "additionalProperties": {
            "$ref": "#/definitions/TimeSpan",
            "additionalProperties": true
          },
          "type": "object",
          "description": "Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Build Event Data",
      "description": "Build event data for Google Cloud Platform API operations."
    },
    "Artifacts": {
      "properties": {
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE."
        },
        "objects": {
          "$ref": "#/definitions/ArtifactObjects",
          "additionalProperties": true,
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps."
    },
    "ArtifactObjects": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix."
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Path globs used to match files in the build's workspace."
        },
        "timing": {
          "$ref": "#/definitions/TimeSpan",
          "additionalProperties": true,
          "description": "Stores timing information for pushing all artifact objects."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Artifact Objects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps."
    },
    "BuildOptions": {
      "properties": {
        "sourceProvenanceHash": {
          "items": {
            "enum": [
              "NONE",
              0,
              "SHA256",
              1,
              "MD5",
              2
            ]
          },
          "type": "array",
          "title": "Hash Type",
          "description": "Specifies the hash algorithm, if any."
        },
        "requestedVerifyOption": {
          "enum": [
            "NOT_VERIFIED",
            0,
            "VERIFIED",
            1
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Verify Option",
          "description": "Specifies the manner in which the build should be verified, if at all."
        },
        "machineType": {
          "enum": [
            "UNSPECIFIED",
            0,
            "N1_HIGHCPU_8",
            1,
            "N1_HIGHCPU_32",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Machine Type",
          "description": "Supported VM sizes."
        },
        "diskSizeGb": {
          "type": "integer",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error."
        },
        "substitutionOption": {
          "enum": [
            "MUST_MATCH",
            0,
            "ALLOW_LOOSE",
            1
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Substitution Option",
          "description": "Specifies the behavior when there is an error in the substitution checks."
        },
        "logStreamingOption": {
          "enum": [
            "STREAM_DEFAULT",
            0,
            "STREAM_ON",
            1,
            "STREAM_OFF",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Log Streaming Option",
          "description": "Specifies the behavior when writing build logs to Google Cloud Storage."
        },
        "workerPool": {
          "type": "string",
          "description": "Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool}"
        },
        "logging": {
          "enum": [
            "LOGGING_UNSPECIFIED",
            0,
            "LEGACY",
            1,
            "GCS_ONLY",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Logging Mode",
          "description": "Specifies the logging mode."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build."
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array",
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Build Options",
      "description": "Optional arguments to enable specific features of builds."
    },
    "BuildStep": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\"."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments."
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "waitFor": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "entrypoint": {
          "type": "string",
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used."
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`."
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array",
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "timing": {
          "$ref": "#/definitions/TimeSpan",
          "additionalProperties": true,
          "description": "Stores timing information for executing this build step."
        },
        "pullTiming": {
          "$ref": "#/definitions/TimeSpan",
          "additionalProperties": true,
          "description": "Stores timing information for pulling this build step's builder image only."
        },
        "timeout": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "format": "regex"
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            0,
            "QUEUED",
            1,
            "WORKING",
            2,
            "SUCCESS",
            3,
            "FAILURE",
            4,
            "INTERNAL_ERROR",
            5,
            "TIMEOUT",
            6,
            "CANCELLED",
            7,
            "EXPIRED",
            9
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Status",
          "description": "Possible status of a build or build step."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Build Step",
      "description": "A step in the build pipeline."
    },
    "BuiltImage": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        },
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "pushTiming": {
          "$ref": "#/definitions/TimeSpan",
          "additionalProperties": true,
          "description": "Stores timing information for pushing the specified image."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Built Image",
      "description": "An image built by the pipeline."
    },
    "FileHashes": {
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "#/definitions/Hash"
          },
          "type": "array",
          "description": "Collection of file hashes."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "File Hashes",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build."
    },
    "Hash": {
      "properties": {
        "type": {
          "enum": [
            "NONE",
            0,
            "SHA256",
            1,
            "MD5",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Hash Type",
          "description": "Specifies the hash algorithm, if any."
        },
        "value": {
          "type": "string",
          "description": "The hash value.",
          "format": "binary",
          "binaryEncoding": "base64"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Hash",
      "description": "Container message for hash values."
    },
    "RepoSource": {
      "properties": {
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository."
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Repo Source",
      "description": "Location of the source in a Google Cloud Source Repository."
    },
    "Results": {
      "properties": {
        "images": {
          "items": {
            "$ref": "#/definitions/BuiltImage"
          },
          "type": "array",
          "description": "Container images that were built as a part of the build."
        },
        "buildStepImages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of build step digests, in the order corresponding to build step indices."
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        },
        "numArtifacts": {
          "type": "integer",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "buildStepOutputs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "artifactTiming": {
          "$ref": "#/definitions/TimeSpan",
          "additionalProperties": true,
          "description": "Time to push all non-container artifacts."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Results",
      "description": "Artifacts created by the build pipeline."
    },
    "Secret": {
      "properties": {
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        },
        "secretEnv": {
          "additionalProperties": {
            "type": "string",
            "format": "binary",
            "binaryEncoding": "base64"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Secret",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value."
    },
    "Source": {
      "properties": {
        "storageSource": {
          "$ref": "#/definitions/StorageSource",
          "additionalProperties": true,
          "description": "If provided, get the source from this location in Google Cloud Storage."
        },
        "repoSource": {
          "$ref": "#/definitions/RepoSource",
          "additionalProperties": true,
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Source"
    },
    "SourceProvenance": {
      "properties": {
        "resolvedStorageSource": {
          "$ref": "#/definitions/StorageSource",
          "additionalProperties": true,
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved."
        },
        "resolvedRepoSource": {
          "$ref": "#/definitions/RepoSource",
          "additionalProperties": true,
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved."
        },
        "fileHashes": {
          "additionalProperties": {
            "$ref": "#/definitions/FileHashes",
            "additionalProperties": true
          },
          "type": "object",
          "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Source Provenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build."
    },
    "StorageSource": {
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source."
        },
        "generation": {
          "type": "integer",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Storage Source",
      "description": "Location of the source in an archive file in Google Cloud Storage."
    },
    "TimeSpan": {
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Start of time span.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End of time span.",
          "format": "date-time"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Time Span",
      "description": "Start and end times for a build execution phase."
    },
    "Volume": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        },
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Volume",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution."
    }
  }
}