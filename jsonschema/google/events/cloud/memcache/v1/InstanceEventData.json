{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/memcache/v1/InstanceEventData.json",
  "name": "InstanceEventData",
  "examples": [],
  "package": "google.events.cloud.memcache.v1",
  "datatype": "google.events.cloud.memcache.v1.InstanceEventData",
  "cloudeventTypes": [
    "google.cloud.memcache.instance.v1.created",
    "google.cloud.memcache.instance.v1.updated",
    "google.cloud.memcache.instance.v1.deleted"
  ],
  "product": "Cloud Memorystore for Memcached",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/InstanceEventData",
  "definitions": {
    "InstanceEventData": {
      "properties": {
        "payload": {
          "$ref": "#/definitions/Instance",
          "additionalProperties": true,
          "description": "Optional. The Instance event payload. Unset for deletion events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance Event Data",
      "description": "The data within all Instance events."
    },
    "Instance": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Unique name of the resource in this scope including project and location using the form:     `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to [zones][google.cloud.memcache.v1.Instance.zones] field for more details."
        },
        "displayName": {
          "type": "string",
          "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"
        },
        "authorizedNetwork": {
          "type": "string",
          "description": "The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used."
        },
        "zones": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance."
        },
        "nodeCount": {
          "type": "integer",
          "description": "Required. Number of nodes in the Memcached instance."
        },
        "nodeConfig": {
          "$ref": "#/definitions/NodeConfig",
          "additionalProperties": true,
          "description": "Required. Configuration for Memcached nodes."
        },
        "memcacheVersion": {
          "enum": [
            "MEMCACHE_VERSION_UNSPECIFIED",
            0,
            "MEMCACHE_1_5",
            1
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Memcache Version",
          "description": "Memcached versions supported by our service."
        },
        "parameters": {
          "$ref": "#/definitions/MemcacheParameters",
          "additionalProperties": true,
          "description": "User defined parameters to apply to the memcached process on each node."
        },
        "memcacheNodes": {
          "items": {
            "$ref": "#/definitions/Node"
          },
          "type": "array",
          "description": "Output only. List of Memcached nodes. Refer to [Node][google.cloud.memcache.v1.Instance.Node] message for more details."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time the instance was created.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time the instance was updated.",
          "format": "date-time"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "CREATING",
            1,
            "READY",
            2,
            "UPDATING",
            3,
            "DELETING",
            4,
            "PERFORMING_MAINTENANCE",
            5
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Different states of a Memcached instance."
        },
        "memcacheFullVersion": {
          "type": "string",
          "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\"."
        },
        "instanceMessages": {
          "items": {
            "$ref": "#/definitions/InstanceMessage"
          },
          "type": "array",
          "description": "List of messages that describe the current state of the Memcached instance."
        },
        "discoveryEndpoint": {
          "type": "string",
          "description": "Output only. Endpoint for the Discovery API."
        },
        "maintenancePolicy": {
          "$ref": "#/definitions/MaintenancePolicy",
          "additionalProperties": true,
          "description": "The maintenance policy for the instance. If not provided, the maintenance event will be performed based on Memorystore internal rollout schedule."
        },
        "maintenanceSchedule": {
          "$ref": "#/definitions/MaintenanceSchedule",
          "additionalProperties": true,
          "description": "Output only. Published maintenance schedule."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance",
      "description": "A Memorystore for Memcached instance"
    },
    "InstanceMessage": {
      "properties": {
        "code": {
          "enum": [
            "CODE_UNSPECIFIED",
            0,
            "ZONE_DISTRIBUTION_UNBALANCED",
            1
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Code"
        },
        "message": {
          "type": "string",
          "description": "Message on memcached instance which will be exposed to users."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance Message"
    },
    "Node": {
      "properties": {
        "nodeId": {
          "type": "string",
          "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name."
        },
        "zone": {
          "type": "string",
          "description": "Output only. Location (GCP Zone) for the Memcached node."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "CREATING",
            1,
            "READY",
            2,
            "DELETING",
            3,
            "UPDATING",
            4
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Different states of a Memcached node."
        },
        "host": {
          "type": "string",
          "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node."
        },
        "port": {
          "type": "integer",
          "description": "Output only. The port number of the Memcached server on this node."
        },
        "parameters": {
          "$ref": "#/definitions/MemcacheParameters",
          "additionalProperties": true,
          "description": "User defined parameters currently applied to the node."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Node"
    },
    "NodeConfig": {
      "properties": {
        "cpuCount": {
          "type": "integer",
          "description": "Required. Number of cpus per Memcached node."
        },
        "memorySizeMb": {
          "type": "integer",
          "description": "Required. Memory size in MiB for each Memcached node."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Node Config",
      "description": "Configuration for a Memcached Node."
    },
    "MaintenancePolicy": {
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. The time when the policy was created.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time when the policy was updated.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
        },
        "weeklyMaintenanceWindow": {
          "items": {
            "$ref": "#/definitions/WeeklyMaintenanceWindow"
          },
          "type": "array",
          "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Maintenance Policy",
      "description": "Maintenance policy per instance."
    },
    "MaintenanceSchedule": {
      "properties": {
        "startTime": {
          "type": "string",
          "description": "Output only. The start time of any upcoming scheduled maintenance for this instance.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "Output only. The end time of any upcoming scheduled maintenance for this instance.",
          "format": "date-time"
        },
        "scheduleDeadlineTime": {
          "type": "string",
          "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule.",
          "format": "date-time"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Maintenance Schedule",
      "description": "Upcoming maintenance schedule."
    },
    "MemcacheParameters": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes."
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "User defined set of parameters to use in the memcached process."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Memcache Parameters"
    },
    "WeeklyMaintenanceWindow": {
      "properties": {
        "day": {
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            0,
            "MONDAY",
            1,
            "TUESDAY",
            2,
            "WEDNESDAY",
            3,
            "THURSDAY",
            4,
            "FRIDAY",
            5,
            "SATURDAY",
            6,
            "SUNDAY",
            7
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Day Of Week",
          "description": "Represents a day of week."
        },
        "startTime": {
          "$ref": "#/definitions/TimeOfDay",
          "additionalProperties": true,
          "description": "Required. Start time of the window in UTC."
        },
        "duration": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Required. Duration of the time window.",
          "format": "regex"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Weekly Maintenance Window",
      "description": "Time window specified for weekly operations."
    },
    "TimeOfDay": {
      "properties": {
        "hours": {
          "type": "integer",
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
        },
        "minutes": {
          "type": "integer",
          "description": "Minutes of hour of day. Must be from 0 to 59."
        },
        "seconds": {
          "type": "integer",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
        },
        "nanos": {
          "type": "integer",
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Time Of Day",
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are [google.type.Date][google.type.Date] and `google.protobuf.Timestamp`."
    }
  }
}