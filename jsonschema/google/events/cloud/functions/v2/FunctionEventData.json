{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/functions/v2/FunctionEventData.json",
  "name": "FunctionEventData",
  "examples": [],
  "package": "google.events.cloud.functions.v2",
  "datatype": "google.events.cloud.functions.v2.FunctionEventData",
  "cloudeventTypes": [
    "google.cloud.functions.function.v2.created",
    "google.cloud.functions.function.v2.updated",
    "google.cloud.functions.function.v2.deleted"
  ],
  "product": "Cloud Functions",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/FunctionEventData",
  "definitions": {
    "FunctionEventData": {
      "properties": {
        "payload": {
          "$ref": "#/definitions/Function",
          "additionalProperties": true,
          "description": "Optional. The Function event payload. Unset for deletion events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Function Event Data",
      "description": "The data within all Function events."
    },
    "BuildConfig": {
      "properties": {
        "build": {
          "type": "string",
          "description": "Output only. The Cloud Build name of the latest successful deployment of the function."
        },
        "runtime": {
          "type": "string",
          "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime)."
        },
        "entryPoint": {
          "type": "string",
          "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`."
        },
        "source": {
          "$ref": "#/definitions/Source",
          "additionalProperties": true,
          "description": "The location of the function source code."
        },
        "sourceProvenance": {
          "$ref": "#/definitions/SourceProvenance",
          "additionalProperties": true,
          "description": "Output only. A permanent fixed identifier for source."
        },
        "workerPool": {
          "type": "string",
          "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-<project_number>@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project."
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "User-provided build-time environment variables for the function"
        },
        "dockerRegistry": {
          "enum": [
            "DOCKER_REGISTRY_UNSPECIFIED",
            0,
            "CONTAINER_REGISTRY",
            1,
            "ARTIFACT_REGISTRY",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Docker Registry",
          "description": "Docker Registry to use for storing function Docker images."
        },
        "dockerRepository": {
          "type": "string",
          "description": "User managed repository created in Artifact Registry optionally with a customer managed encryption key. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'."
        },
        "buildpackStack": {
          "type": "string",
          "description": "Specifies one of the Google provided buildpack stacks."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Build Config",
      "description": "Describes the Build step of the function that builds a container from the given source."
    },
    "EventFilter": {
      "properties": {
        "attribute": {
          "type": "string",
          "description": "Required. The name of a CloudEvents attribute."
        },
        "value": {
          "type": "string",
          "description": "Required. The value for the attribute."
        },
        "operator": {
          "type": "string",
          "description": "Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Event Filter",
      "description": "Filters events based on exact matches on the CloudEvents attributes."
    },
    "EventTrigger": {
      "properties": {
        "trigger": {
          "type": "string",
          "description": "Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`."
        },
        "triggerRegion": {
          "type": "string",
          "description": "The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function."
        },
        "eventType": {
          "type": "string",
          "description": "Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`."
        },
        "eventFilters": {
          "items": {
            "$ref": "#/definitions/EventFilter"
          },
          "type": "array",
          "description": "Criteria used to filter events."
        },
        "pubsubTopic": {
          "type": "string",
          "description": "Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion."
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`."
        },
        "retryPolicy": {
          "enum": [
            "RETRY_POLICY_UNSPECIFIED",
            0,
            "RETRY_POLICY_DO_NOT_RETRY",
            1,
            "RETRY_POLICY_RETRY",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Retry Policy",
          "description": "Describes the retry policy in case of function's execution failure. Retried execution is charged as any other execution."
        },
        "channel": {
          "type": "string",
          "description": "Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Event Trigger",
      "description": "Describes EventTrigger, used to request events to be sent from another service."
    },
    "Function": {
      "properties": {
        "name": {
          "type": "string",
          "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`"
        },
        "environment": {
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            0,
            "GEN_1",
            1,
            "GEN_2",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Environment",
          "description": "The environment the function is hosted on."
        },
        "description": {
          "type": "string",
          "description": "User-provided description of a function."
        },
        "buildConfig": {
          "$ref": "#/definitions/BuildConfig",
          "additionalProperties": true,
          "description": "Describes the Build step of the function that builds a container from the given source."
        },
        "serviceConfig": {
          "$ref": "#/definitions/ServiceConfig",
          "additionalProperties": true,
          "description": "Describes the Service being deployed. Currently deploys services to Cloud Run (fully managed)."
        },
        "eventTrigger": {
          "$ref": "#/definitions/EventTrigger",
          "additionalProperties": true,
          "description": "An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "ACTIVE",
            1,
            "FAILED",
            2,
            "DEPLOYING",
            3,
            "DELETING",
            4,
            "UNKNOWN",
            5
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Describes the current state of the function."
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The last update timestamp of a Cloud Function.",
          "format": "date-time"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels associated with this Cloud Function."
        },
        "stateMessages": {
          "items": {
            "$ref": "#/definitions/StateMessage"
          },
          "type": "array",
          "description": "Output only. State Messages for this Cloud Function."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Function",
      "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations."
    },
    "RepoSource": {
      "properties": {
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed."
        },
        "repoName": {
          "type": "string",
          "description": "Name of the Cloud Source Repository."
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. eg. helloworld (no leading slash allowed)"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Repo Source",
      "description": "Location of the source in a Google Cloud Source Repository."
    },
    "SecretEnvVar": {
      "properties": {
        "key": {
          "type": "string",
          "description": "Name of the environment variable."
        },
        "projectId": {
          "type": "string",
          "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function."
        },
        "secret": {
          "type": "string",
          "description": "Name of the secret in secret manager (not the full resource name)."
        },
        "version": {
          "type": "string",
          "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Secret Env Var",
      "description": "Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable."
    },
    "SecretVolume": {
      "properties": {
        "mountPath": {
          "type": "string",
          "description": "The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets"
        },
        "projectId": {
          "type": "string",
          "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function."
        },
        "secret": {
          "type": "string",
          "description": "Name of the secret in secret manager (not the full resource name)."
        },
        "versions": {
          "items": {
            "$ref": "#/definitions/SecretVersion"
          },
          "type": "array",
          "description": "List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Secret Volume",
      "description": "Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container."
    },
    "SecretVersion": {
      "properties": {
        "version": {
          "type": "string",
          "description": "Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately."
        },
        "path": {
          "type": "string",
          "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Secret Version",
      "description": "Configuration for a single version."
    },
    "ServiceConfig": {
      "properties": {
        "service": {
          "type": "string",
          "description": "Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`"
        },
        "timeoutSeconds": {
          "type": "integer",
          "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds."
        },
        "availableMemory": {
          "type": "string",
          "description": "The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description."
        },
        "availableCpu": {
          "type": "string",
          "description": "The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU"
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Environment variables that shall be available during function execution."
        },
        "maxInstanceCount": {
          "type": "integer",
          "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details."
        },
        "minInstanceCount": {
          "type": "integer",
          "description": "The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case."
        },
        "vpcConnector": {
          "type": "string",
          "description": "The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`."
        },
        "vpcConnectorEgressSettings": {
          "enum": [
            "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
            0,
            "PRIVATE_RANGES_ONLY",
            1,
            "ALL_TRAFFIC",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Vpc Connector Egress Settings",
          "description": "Available egress settings. This controls what traffic is diverted through the VPC Access Connector resource. By default PRIVATE_RANGES_ONLY will be used."
        },
        "ingressSettings": {
          "enum": [
            "INGRESS_SETTINGS_UNSPECIFIED",
            0,
            "ALLOW_ALL",
            1,
            "ALLOW_INTERNAL_ONLY",
            2,
            "ALLOW_INTERNAL_AND_GCLB",
            3
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Ingress Settings",
          "description": "Available ingress settings. This controls what traffic can reach the function. If unspecified, ALLOW_ALL will be used."
        },
        "uri": {
          "type": "string",
          "description": "Output only. URI of the Service deployed."
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`."
        },
        "allTrafficOnLatestRevision": {
          "type": "boolean",
          "description": "Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic."
        },
        "secretEnvironmentVariables": {
          "items": {
            "$ref": "#/definitions/SecretEnvVar"
          },
          "type": "array",
          "description": "Secret environment variables configuration."
        },
        "secretVolumes": {
          "items": {
            "$ref": "#/definitions/SecretVolume"
          },
          "type": "array",
          "description": "Secret volumes configuration."
        },
        "revision": {
          "type": "string",
          "description": "Output only. The name of service revision."
        },
        "maxInstanceRequestConcurrency": {
          "type": "integer",
          "description": "Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1."
        },
        "securityLevel": {
          "enum": [
            "SECURITY_LEVEL_UNSPECIFIED",
            0,
            "SECURE_ALWAYS",
            1,
            "SECURE_OPTIONAL",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Security Level",
          "description": "Available security level settings. This enforces security protocol on function URL. Security level is only ocnfigurable for 1st Gen functions, If unspecified, SECURE_OPTIONAL will be used. 2nd Gen functions are SECURE_ALWAYS ONLY."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Service Config",
      "description": "Describes the Service being deployed. Currently Supported : Cloud Run (fully managed). Next tag: 23"
    },
    "Source": {
      "properties": {
        "storageSource": {
          "$ref": "#/definitions/StorageSource",
          "additionalProperties": true,
          "description": "If provided, get the source from this location in Google Cloud Storage."
        },
        "repoSource": {
          "$ref": "#/definitions/RepoSource",
          "additionalProperties": true,
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Source",
      "description": "The location of the function source code."
    },
    "SourceProvenance": {
      "properties": {
        "resolvedStorageSource": {
          "$ref": "#/definitions/StorageSource",
          "additionalProperties": true,
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved."
        },
        "resolvedRepoSource": {
          "$ref": "#/definitions/RepoSource",
          "additionalProperties": true,
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Source Provenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build."
    },
    "StateMessage": {
      "properties": {
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            0,
            "ERROR",
            1,
            "WARNING",
            2,
            "INFO",
            3
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Severity",
          "description": "Severity of the state message."
        },
        "type": {
          "type": "string",
          "description": "One-word CamelCase type of the state message."
        },
        "message": {
          "type": "string",
          "description": "The message."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "State Message",
      "description": "Informational messages about the state of the Cloud Function or Operation."
    },
    "StorageSource": {
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build."
        },
        "generation": {
          "type": "integer",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Storage Source",
      "description": "Location of the source in an archive file in Google Cloud Storage."
    }
  }
}