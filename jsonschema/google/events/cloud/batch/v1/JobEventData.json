{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/batch/v1/JobEventData.json",
  "name": "JobEventData",
  "examples": [],
  "package": "google.events.cloud.batch.v1",
  "datatype": "google.events.cloud.batch.v1.JobEventData",
  "cloudeventTypes": [
    "google.cloud.batch.job.v1.created",
    "google.cloud.batch.job.v1.deleted"
  ],
  "product": "Batch",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/JobEventData",
  "definitions": {
    "JobEventData": {
      "properties": {
        "payload": {
          "$ref": "#/definitions/Job",
          "additionalProperties": true,
          "description": "Optional. The Job event payload. Unset for deletion events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Job Event Data",
      "description": "The data within all Job events."
    },
    "AllocationPolicy": {
      "properties": {
        "location": {
          "$ref": "#/definitions/LocationPolicy",
          "additionalProperties": true,
          "description": "Location where compute resources should be allocated for the Job."
        },
        "instances": {
          "items": {
            "$ref": "#/definitions/InstancePolicyOrTemplate"
          },
          "type": "array",
          "description": "Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now."
        },
        "serviceAccount": {
          "$ref": "#/definitions/ServiceAccount",
          "additionalProperties": true,
          "description": "Service account that VMs will run as."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved."
        },
        "network": {
          "$ref": "#/definitions/NetworkPolicy",
          "additionalProperties": true,
          "description": "The network policy."
        },
        "placement": {
          "$ref": "#/definitions/PlacementPolicy",
          "additionalProperties": true,
          "description": "The placement policy."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Allocation Policy",
      "description": "A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job."
    },
    "Accelerator": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`."
        },
        "count": {
          "type": "integer",
          "description": "The number of accelerators of this type."
        },
        "installGpuDrivers": {
          "type": "boolean",
          "description": "Deprecated: please use instances[0].install_gpu_drivers instead."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Accelerator",
      "description": "Accelerator describes Compute Engine accelerators to be attached to the VM."
    },
    "AttachedDisk": {
      "properties": {
        "newDisk": {
          "$ref": "#/definitions/Disk",
          "additionalProperties": true
        },
        "existingDisk": {
          "type": "string",
          "description": "Name of an existing PD."
        },
        "deviceName": {
          "type": "string",
          "description": "Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Attached Disk",
      "description": "A new or an existing persistent disk (PD) or a local ssd attached to a VM instance."
    },
    "Disk": {
      "properties": {
        "image": {
          "type": "string",
          "description": "Name of a public or custom image used as the data source. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * \"batch-debian\": use Batch Debian images. * \"batch-centos\": use Batch CentOS images. * \"batch-cos\": use Batch Container-Optimized images. * \"batch-hpc-centos\": use Batch HPC CentOS images."
        },
        "snapshot": {
          "type": "string",
          "description": "Name of a snapshot used as the data source. Snapshot is not supported as boot disk now."
        },
        "type": {
          "type": "string",
          "description": "Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type \"local-ssd\". Persistent disks and boot disks use \"pd-balanced\", \"pd-extreme\", \"pd-ssd\" or \"pd-standard\"."
        },
        "sizeGb": {
          "type": "integer",
          "description": "Disk size in GB. For persistent disk, this field is ignored if `data_source` is `image` or `snapshot`. For local SSD, size_gb should be a multiple of 375GB, otherwise, the final size will be the next greater multiple of 375 GB. For boot disk, Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the boot_disk_mib field in task spec's compute_resource are defined, Batch will only honor this field."
        },
        "diskInterface": {
          "type": "string",
          "description": "Local SSDs are available through both \"SCSI\" and \"NVMe\" interfaces. If not indicated, \"NVMe\" will be the default one for local ssds. We only support \"SCSI\" for persistent disks now."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Disk",
      "description": "A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds."
    },
    "InstancePolicy": {
      "properties": {
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        },
        "minCpuPlatform": {
          "type": "string",
          "description": "The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform."
        },
        "provisioningModel": {
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            0,
            "STANDARD",
            1,
            "SPOT",
            2,
            "PREEMPTIBLE",
            3
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Provisioning Model",
          "description": "Compute Engine VM instance provisioning model."
        },
        "accelerators": {
          "items": {
            "$ref": "#/definitions/Accelerator"
          },
          "type": "array",
          "description": "The accelerators attached to each VM instance."
        },
        "bootDisk": {
          "$ref": "#/definitions/Disk",
          "additionalProperties": true,
          "description": "Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be deleted when the VM is deleted. Batch API now only supports booting from image."
        },
        "disks": {
          "items": {
            "$ref": "#/definitions/AttachedDisk"
          },
          "type": "array",
          "description": "Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance Policy",
      "description": "InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy."
    },
    "InstancePolicyOrTemplate": {
      "properties": {
        "policy": {
          "$ref": "#/definitions/InstancePolicy",
          "additionalProperties": true,
          "description": "InstancePolicy."
        },
        "instanceTemplate": {
          "type": "string",
          "description": "Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict."
        },
        "installGpuDrivers": {
          "type": "boolean",
          "description": "Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance Policy Or Template",
      "description": "Either an InstancePolicy or an instance template."
    },
    "LocationPolicy": {
      "properties": {
        "allowedLocations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, [\"regions/us-central1\"] allow VMs in any zones in region us-central1. [\"zones/us-central1-a\", \"zones/us-central1-c\"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, [\"regions/us-central1\", \"zones/us-central1-a\", \"zones/us-central1-b\", \"zones/us-west1-a\"] contains 2 regions \"us-central1\" and \"us-west1\". An error is expected in this case."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Location Policy"
    },
    "NetworkInterface": {
      "properties": {
        "network": {
          "type": "string",
          "description": "The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}"
        },
        "subnetwork": {
          "type": "string",
          "description": "The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}"
        },
        "noExternalIpAddress": {
          "type": "boolean",
          "description": "Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Network Interface",
      "description": "A network interface."
    },
    "NetworkPolicy": {
      "properties": {
        "networkInterfaces": {
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "type": "array",
          "description": "Network configurations."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Network Policy",
      "description": "NetworkPolicy describes VM instance network configurations."
    },
    "PlacementPolicy": {
      "properties": {
        "collocation": {
          "type": "string",
          "description": "UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED."
        },
        "maxDistance": {
          "type": "integer",
          "description": "When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Placement Policy",
      "description": "PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy."
    },
    "ComputeResource": {
      "properties": {
        "cpuMilli": {
          "type": "integer",
          "description": "The milliCPU count."
        },
        "memoryMib": {
          "type": "integer",
          "description": "Memory in MiB."
        },
        "bootDiskMib": {
          "type": "integer",
          "description": "Extra boot disk size in MiB for each task."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Compute Resource",
      "description": "Compute resource requirements"
    },
    "Environment": {
      "properties": {
        "variables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A map of environment variable names to values."
        },
        "secretVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable."
        },
        "encryptedVariables": {
          "$ref": "#/definitions/KMSEnvMap",
          "additionalProperties": true,
          "description": "An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Environment",
      "description": "An Environment describes a collection of environment variables to set when executing Tasks."
    },
    "KMSEnvMap": {
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The name of the KMS key that will be used to decrypt the cipher text."
        },
        "cipherText": {
          "type": "string",
          "description": "The value of the cipherText response from the `encrypt` method."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "KMS Env Map"
    },
    "GCS": {
      "properties": {
        "remotePath": {
          "type": "string",
          "description": "Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "GCS",
      "description": "Represents a Google Cloud Storage volume."
    },
    "Job": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\"."
        },
        "uid": {
          "type": "string",
          "description": "Output only. A system generated unique ID (in UUID4 format) for the Job."
        },
        "priority": {
          "type": "integer",
          "description": "Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied."
        },
        "taskGroups": {
          "items": {
            "$ref": "#/definitions/TaskGroup"
          },
          "type": "array",
          "description": "Required. TaskGroups in the Job. Only one TaskGroup is supported now."
        },
        "allocationPolicy": {
          "$ref": "#/definitions/AllocationPolicy",
          "additionalProperties": true,
          "description": "Compute resource allocation for all TaskGroups in the Job."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": {    \"department\": \"finance\",    \"environment\": \"test\"  } You can assign up to 64 labels.  [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "additionalProperties": true,
          "description": "Output only. Job status. It is read only for users."
        },
        "createTime": {
          "type": "string",
          "description": "Output only. When the Job was created.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The last time the Job was updated.",
          "format": "date-time"
        },
        "logsPolicy": {
          "$ref": "#/definitions/LogsPolicy",
          "additionalProperties": true,
          "description": "Log preservation policy for the Job."
        },
        "notifications": {
          "items": {
            "$ref": "#/definitions/JobNotification"
          },
          "type": "array",
          "description": "Notification configurations."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Job",
      "description": "The Cloud Batch Job description."
    },
    "JobNotification": {
      "properties": {
        "pubsubTopic": {
          "type": "string",
          "description": "The Pub/Sub topic where notifications like the job state changes will be published. This topic exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`."
        },
        "message": {
          "$ref": "#/definitions/Message",
          "additionalProperties": true,
          "description": "The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Job Notification",
      "description": "Notification configurations."
    },
    "Message": {
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            0,
            "JOB_STATE_CHANGED",
            1,
            "TASK_STATE_CHANGED",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Type",
          "description": "The message type."
        },
        "newJobState": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "QUEUED",
            1,
            "SCHEDULED",
            2,
            "RUNNING",
            3,
            "SUCCEEDED",
            4,
            "FAILED",
            5,
            "DELETION_IN_PROGRESS",
            6
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Valid Job states."
        },
        "newTaskState": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "PENDING",
            1,
            "ASSIGNED",
            2,
            "RUNNING",
            3,
            "FAILED",
            4,
            "SUCCEEDED",
            5,
            "UNEXECUTED",
            6
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Task states."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Message",
      "description": "Message details. Describe the attribute that a message should have. Without specified message attributes, no message will be sent by default."
    },
    "JobStatus": {
      "properties": {
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "QUEUED",
            1,
            "SCHEDULED",
            2,
            "RUNNING",
            3,
            "SUCCEEDED",
            4,
            "FAILED",
            5,
            "DELETION_IN_PROGRESS",
            6
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Valid Job states."
        },
        "statusEvents": {
          "items": {
            "$ref": "#/definitions/StatusEvent"
          },
          "type": "array",
          "description": "Job status events"
        },
        "taskGroups": {
          "additionalProperties": {
            "$ref": "#/definitions/TaskGroupStatus",
            "additionalProperties": true
          },
          "type": "object",
          "description": "Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID."
        },
        "runDuration": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "The duration of time that the Job spent in status RUNNING.",
          "format": "regex"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Job Status",
      "description": "Job status."
    },
    "InstanceStatus": {
      "properties": {
        "machineType": {
          "type": "string",
          "description": "The Compute Engine machine type."
        },
        "provisioningModel": {
          "enum": [
            "PROVISIONING_MODEL_UNSPECIFIED",
            0,
            "STANDARD",
            1,
            "SPOT",
            2,
            "PREEMPTIBLE",
            3
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Provisioning Model",
          "description": "Compute Engine VM instance provisioning model."
        },
        "taskPack": {
          "type": "integer",
          "description": "The max number of tasks can be assigned to this instance type."
        },
        "bootDisk": {
          "$ref": "#/definitions/Disk",
          "additionalProperties": true,
          "description": "The VM boot disk."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Instance Status",
      "description": "VM instance status."
    },
    "TaskGroupStatus": {
      "properties": {
        "counts": {
          "additionalProperties": {
            "type": "integer"
          },
          "type": "object",
          "description": "Count of task in each state in the TaskGroup. The map key is task state name."
        },
        "instances": {
          "items": {
            "$ref": "#/definitions/InstanceStatus"
          },
          "type": "array",
          "description": "Status of instances allocated for the TaskGroup."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Task Group Status",
      "description": "Aggregated task status for a TaskGroup."
    },
    "LifecyclePolicy": {
      "properties": {
        "action": {
          "enum": [
            "ACTION_UNSPECIFIED",
            0,
            "RETRY_TASK",
            1,
            "FAIL_TASK",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Action",
          "description": "Action on task failures based on different conditions."
        },
        "actionCondition": {
          "$ref": "#/definitions/ActionCondition",
          "additionalProperties": true,
          "description": "Conditions that decide why a task failure is dealt with a specific action."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Lifecycle Policy",
      "description": "LifecyclePolicy describes how to deal with task failures based on different conditions."
    },
    "ActionCondition": {
      "properties": {
        "exitCodes": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Action Condition",
      "description": "Conditions for actions to deal with task failures."
    },
    "LogsPolicy": {
      "properties": {
        "destination": {
          "enum": [
            "DESTINATION_UNSPECIFIED",
            0,
            "CLOUD_LOGGING",
            1,
            "PATH",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Destination",
          "description": "The destination (if any) for logs."
        },
        "logsPath": {
          "type": "string",
          "description": "The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Logs Policy",
      "description": "LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved."
    },
    "NFS": {
      "properties": {
        "server": {
          "type": "string",
          "description": "The IP address of the NFS."
        },
        "remotePath": {
          "type": "string",
          "description": "Remote source path exported from the NFS, e.g., \"/share\"."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "NFS",
      "description": "Represents an NFS volume."
    },
    "Runnable": {
      "properties": {
        "container": {
          "$ref": "#/definitions/Container",
          "additionalProperties": true,
          "description": "Container runnable."
        },
        "script": {
          "$ref": "#/definitions/Script",
          "additionalProperties": true,
          "description": "Script runnable."
        },
        "barrier": {
          "$ref": "#/definitions/Barrier",
          "additionalProperties": true,
          "description": "Barrier runnable."
        },
        "ignoreExitStatus": {
          "type": "boolean",
          "description": "Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead."
        },
        "background": {
          "type": "boolean",
          "description": "This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers)."
        },
        "alwaysRun": {
          "type": "boolean",
          "description": "By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."
        },
        "environment": {
          "$ref": "#/definitions/Environment",
          "additionalProperties": true,
          "description": "Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup)."
        },
        "timeout": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Timeout for this Runnable.",
          "format": "regex"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Labels for this Runnable."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Runnable",
      "description": "Runnable describes instructions for executing a specific script or container as part of a Task."
    },
    "Barrier": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Barrier",
      "description": "Barrier runnable blocks until all tasks in a taskgroup reach it."
    },
    "Container": {
      "properties": {
        "imageUri": {
          "type": "string",
          "description": "The URI to pull the container image from."
        },
        "commands": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT."
        },
        "entrypoint": {
          "type": "string",
          "description": "Overrides the `ENTRYPOINT` specified in the container."
        },
        "volumes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro"
        },
        "options": {
          "type": "string",
          "description": "Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\"."
        },
        "blockExternalNetwork": {
          "type": "boolean",
          "description": "If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field."
        },
        "username": {
          "type": "string",
          "description": "Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager."
        },
        "password": {
          "type": "string",
          "description": "Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Container",
      "description": "Container runnable."
    },
    "Script": {
      "properties": {
        "path": {
          "type": "string",
          "description": "Script file path on the host VM. To specify an interpreter, please add a `#!<interpreter>`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`."
        },
        "text": {
          "type": "string",
          "description": "Shell script text. To specify an interpreter, please add a `#!<interpreter>\\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Script",
      "description": "Script runnable."
    },
    "ServiceAccount": {
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here."
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Service Account",
      "description": "Carries information about a Google Cloud service account."
    },
    "StatusEvent": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the event."
        },
        "description": {
          "type": "string",
          "description": "Description of the event."
        },
        "eventTime": {
          "type": "string",
          "description": "The time this event occurred.",
          "format": "date-time"
        },
        "taskExecution": {
          "$ref": "#/definitions/TaskExecution",
          "additionalProperties": true,
          "description": "Task Execution"
        },
        "taskState": {
          "enum": [
            "STATE_UNSPECIFIED",
            0,
            "PENDING",
            1,
            "ASSIGNED",
            2,
            "RUNNING",
            3,
            "FAILED",
            4,
            "SUCCEEDED",
            5,
            "UNEXECUTED",
            6
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "Task states."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Status Event",
      "description": "Status event"
    },
    "TaskExecution": {
      "properties": {
        "exitCode": {
          "type": "integer",
          "description": "When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Task Execution",
      "description": "This Task Execution field includes detail information for task execution procedures, based on StatusEvent types."
    },
    "TaskGroup": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\"."
        },
        "taskSpec": {
          "$ref": "#/definitions/TaskSpec",
          "additionalProperties": true,
          "description": "Required. Tasks in the group share the same task spec."
        },
        "taskCount": {
          "type": "integer",
          "description": "Number of Tasks in the TaskGroup. Default is 1."
        },
        "parallelism": {
          "type": "integer",
          "description": "Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field parallelism must be 1 if the scheduling_policy is IN_ORDER."
        },
        "schedulingPolicy": {
          "enum": [
            "SCHEDULING_POLICY_UNSPECIFIED",
            0,
            "AS_SOON_AS_POSSIBLE",
            1,
            "IN_ORDER",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Scheduling Policy",
          "description": "How Tasks in the TaskGroup should be scheduled relative to each other."
        },
        "taskEnvironments": {
          "items": {
            "$ref": "#/definitions/Environment"
          },
          "type": "array",
          "description": "An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1)."
        },
        "taskCountPerNode": {
          "type": "integer",
          "description": "Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements."
        },
        "requireHostsFile": {
          "type": "boolean",
          "description": "When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false."
        },
        "permissiveSsh": {
          "type": "boolean",
          "description": "When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Task Group",
      "description": "A TaskGroup defines one or more Tasks that all share the same TaskSpec."
    },
    "TaskSpec": {
      "properties": {
        "runnables": {
          "items": {
            "$ref": "#/definitions/Runnable"
          },
          "type": "array",
          "description": "The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures."
        },
        "computeResource": {
          "$ref": "#/definitions/ComputeResource",
          "additionalProperties": true,
          "description": "ComputeResource requirements."
        },
        "maxRunDuration": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.",
          "format": "regex"
        },
        "maxRetryCount": {
          "type": "integer",
          "description": "Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10]."
        },
        "lifecyclePolicies": {
          "items": {
            "$ref": "#/definitions/LifecyclePolicy"
          },
          "type": "array",
          "description": "Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count."
        },
        "environments": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Deprecated: please use environment(non-plural) instead."
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array",
          "description": "Volumes to mount before running Tasks using this TaskSpec."
        },
        "environment": {
          "$ref": "#/definitions/Environment",
          "additionalProperties": true,
          "description": "Environment variables to set before running the Task."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Task Spec",
      "description": "Spec of a task"
    },
    "Volume": {
      "properties": {
        "nfs": {
          "$ref": "#/definitions/NFS",
          "additionalProperties": true,
          "description": "A Network File System (NFS) volume. For example, a Filestore file share."
        },
        "gcs": {
          "$ref": "#/definitions/GCS",
          "additionalProperties": true,
          "description": "A Google Cloud Storage (GCS) volume."
        },
        "deviceName": {
          "type": "string",
          "description": "Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template."
        },
        "mountPath": {
          "type": "string",
          "description": "The mount path for the volume, e.g. /mnt/disks/share."
        },
        "mountOptions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html)."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Volume",
      "description": "Volume describes a volume and parameters for it to be mounted to a VM."
    }
  }
}