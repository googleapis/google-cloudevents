{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/networkservices/v1/GrpcRouteEventData.json",
  "name": "GrpcRouteEventData",
  "examples": [],
  "package": "google.events.cloud.networkservices.v1",
  "datatype": "google.events.cloud.networkservices.v1.GrpcRouteEventData",
  "cloudeventTypes": [
    "google.cloud.networkservices.grpcRoute.v1.created",
    "google.cloud.networkservices.grpcRoute.v1.updated",
    "google.cloud.networkservices.grpcRoute.v1.deleted"
  ],
  "product": "Network Services",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/GrpcRouteEventData",
  "definitions": {
    "GrpcRouteEventData": {
      "properties": {
        "payload": {
          "$ref": "#/definitions/GrpcRoute",
          "additionalProperties": true,
          "description": "Optional. The GrpcRoute event payload. Unset for deletion events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Grpc Route Event Data",
      "description": "The data within all GrpcRoute events."
    },
    "GrpcRoute": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/<grpc_route_name>`"
        },
        "selfLink": {
          "type": "string",
          "description": "Output only. Server-defined URL of this resource"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The timestamp when the resource was created.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The timestamp when the resource was updated.",
          "format": "date-time"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Optional. Set of label tags associated with the GrpcRoute resource."
        },
        "description": {
          "type": "string",
          "description": "Optional. A free-text description of the resource. Max length 1024 characters."
        },
        "hostnames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Required. Service hostnames with an optional port for which this route describes traffic. Format: <hostname>[:<port>] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:  - IPs are not allowed.  - A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`. If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. \"xds:///service:123\"), otherwise they must supply the URI without a port (i.e. \"xds:///service\")."
        },
        "meshes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/<mesh_name>`"
        },
        "gateways": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/<gateway_name>`"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/RouteRule"
          },
          "type": "array",
          "description": "Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Grpc Route",
      "description": "GrpcRoute is the resource defining how gRPC traffic routed by a Mesh or Gateway resource is routed."
    },
    "Destination": {
      "properties": {
        "serviceName": {
          "type": "string",
          "description": "Required. The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService."
        },
        "weight": {
          "type": "integer",
          "description": "Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as:         weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Destination",
      "description": "The destination to which traffic will be routed."
    },
    "FaultInjectionPolicy": {
      "properties": {
        "delay": {
          "$ref": "#/definitions/Delay",
          "additionalProperties": true,
          "description": "The specification for injecting delay to client requests."
        },
        "abort": {
          "$ref": "#/definitions/Abort",
          "additionalProperties": true,
          "description": "The specification for aborting to client requests."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Fault Injection Policy",
      "description": "The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests."
    },
    "Abort": {
      "properties": {
        "httpStatus": {
          "type": "integer",
          "description": "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive."
        },
        "percentage": {
          "type": "integer",
          "description": "The percentage of traffic which will be aborted. The value must be between [0, 100]"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Abort",
      "description": "Specification of how client requests are aborted as part of fault injection before being sent to a destination."
    },
    "Delay": {
      "properties": {
        "fixedDelay": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Specify a fixed delay before forwarding the request.",
          "format": "regex"
        },
        "percentage": {
          "type": "integer",
          "description": "The percentage of traffic on which delay will be injected. The value must be between [0, 100]"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Delay",
      "description": "Specification of how client requests are delayed as part of fault injection before being sent to a destination."
    },
    "HeaderMatch": {
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            0,
            "EXACT",
            1,
            "REGULAR_EXPRESSION",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Type",
          "description": "The type of match."
        },
        "key": {
          "type": "string",
          "description": "Required. The key of the header."
        },
        "value": {
          "type": "string",
          "description": "Required. The value of the header."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Header Match",
      "description": "A match against a collection of headers."
    },
    "MethodMatch": {
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            0,
            "EXACT",
            1,
            "REGULAR_EXPRESSION",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Type",
          "description": "The type of the match."
        },
        "grpcService": {
          "type": "string",
          "description": "Required. Name of the service to match against. If unspecified, will match all services."
        },
        "grpcMethod": {
          "type": "string",
          "description": "Required. Name of the method to match against. If unspecified, will match all methods."
        },
        "caseSensitive": {
          "type": "boolean",
          "description": "Optional. Specifies that matches are case sensitive.  The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Method Match",
      "description": "Specifies a match against a method."
    },
    "RetryPolicy": {
      "properties": {
        "retryConditions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "- connect-failure: Router will retry on failures connecting to Backend    Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream    with a REFUSED_STREAM error code. This reset type indicates that it is    safe to retry. - cancelled: Router will retry if the gRPC status code in the response header    is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response    header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the    response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response    header is set to unavailable"
        },
        "numRetries": {
          "type": "integer",
          "description": "Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Retry Policy",
      "description": "The specifications for retries."
    },
    "RouteAction": {
      "properties": {
        "destinations": {
          "items": {
            "$ref": "#/definitions/Destination"
          },
          "type": "array",
          "description": "Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations."
        },
        "faultInjectionPolicy": {
          "$ref": "#/definitions/FaultInjectionPolicy",
          "additionalProperties": true,
          "description": "Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy"
        },
        "timeout": {
          "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
          "type": "string",
          "description": "Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.",
          "format": "regex"
        },
        "retryPolicy": {
          "$ref": "#/definitions/RetryPolicy",
          "additionalProperties": true,
          "description": "Optional. Specifies the retry policy associated with this route."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Route Action",
      "description": "Specifies how to route matched traffic."
    },
    "RouteMatch": {
      "properties": {
        "method": {
          "$ref": "#/definitions/MethodMatch",
          "additionalProperties": true,
          "description": "Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods."
        },
        "headers": {
          "items": {
            "$ref": "#/definitions/HeaderMatch"
          },
          "type": "array",
          "description": "Optional. Specifies a collection of headers to match."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Route Match",
      "description": "Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match."
    },
    "RouteRule": {
      "properties": {
        "matches": {
          "items": {
            "$ref": "#/definitions/RouteMatch"
          },
          "type": "array",
          "description": "Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied.  If no matches field is specified, this rule will unconditionally match traffic."
        },
        "action": {
          "$ref": "#/definitions/RouteAction",
          "additionalProperties": true,
          "description": "Required. A detailed rule defining how to route traffic. This field is required."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Route Rule",
      "description": "Describes how to route traffic."
    }
  }
}