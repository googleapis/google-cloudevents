{
  "$id": "https://googleapis.github.io/google-cloudevents/jsonschema/google/events/cloud/apihub/v1/VersionEventData.json",
  "name": "VersionEventData",
  "examples": [],
  "package": "google.events.cloud.apihub.v1",
  "datatype": "google.events.cloud.apihub.v1.VersionEventData",
  "cloudeventTypes": [
    "google.cloud.apihub.version.v1.created",
    "google.cloud.apihub.version.v1.updated",
    "google.cloud.apihub.version.v1.deleted"
  ],
  "product": "API hub",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "$ref": "#/definitions/VersionEventData",
  "definitions": {
    "VersionEventData": {
      "properties": {
        "payload": {
          "$ref": "#/definitions/Version",
          "additionalProperties": true,
          "description": "Optional. The Version event payload. Unset for deletion events."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Version Event Data",
      "description": "The data within all Version events."
    },
    "AllowedValue": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. The ID of the allowed value. * If provided, the same will be used. The service will throw an error if the specified id is already used by another allowed value in the same attribute resource. * If not provided, a system generated id derived from the display name will be used. In this case, the service will handle conflict resolution by adding a system generated suffix in case of duplicates. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/."
        },
        "displayName": {
          "type": "string",
          "description": "Required. The display name of the allowed value."
        },
        "description": {
          "type": "string",
          "description": "Optional. The detailed description of the allowed value."
        },
        "immutable": {
          "type": "boolean",
          "description": "Optional. When set to true, the allowed value cannot be updated or deleted by the user. It can only be true for System defined attributes."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Allowed Value",
      "description": "The value that can be assigned to the attribute when the data type is enum."
    },
    "AttributeValues": {
      "properties": {
        "enumValues": {
          "$ref": "#/definitions/EnumAttributeValues",
          "additionalProperties": true,
          "description": "The attribute values associated with a resource in case attribute data type is enum."
        },
        "stringValues": {
          "$ref": "#/definitions/StringAttributeValues",
          "additionalProperties": true,
          "description": "The attribute values associated with a resource in case attribute data type is string."
        },
        "jsonValues": {
          "$ref": "#/definitions/StringAttributeValues",
          "additionalProperties": true,
          "description": "The attribute values associated with a resource in case attribute data type is JSON."
        },
        "attribute": {
          "type": "string",
          "description": "Output only. The name of the attribute. Format: projects/{project}/locations/{location}/attributes/{attribute}"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Attribute Values",
      "description": "The attribute values associated with resource."
    },
    "EnumAttributeValues": {
      "properties": {
        "values": {
          "items": {
            "$ref": "#/definitions/AllowedValue"
          },
          "type": "array",
          "description": "Required. The attribute values in case attribute data type is enum."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Enum Attribute Values",
      "description": "The attribute values of data type enum."
    },
    "StringAttributeValues": {
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Required. The attribute values in case attribute data type is string or JSON."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "String Attribute Values",
      "description": "The attribute values of data type string or JSON."
    },
    "Documentation": {
      "properties": {
        "externalUri": {
          "type": "string",
          "description": "Optional. The uri of the externally hosted documentation."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Documentation",
      "description": "Documentation details."
    },
    "Version": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier. The name of the version. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}`"
        },
        "displayName": {
          "type": "string",
          "description": "Required. The display name of the version."
        },
        "description": {
          "type": "string",
          "description": "Optional. The description of the version."
        },
        "documentation": {
          "$ref": "#/definitions/Documentation",
          "additionalProperties": true,
          "description": "Optional. The documentation of the version."
        },
        "specs": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. The specs associated with this version. Note that an API version can be associated with multiple specs. Format is `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`"
        },
        "apiOperations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. The operations contained in the API version. These operations will be added to the version when a new spec is added or when an existing spec is updated. Format is `projects/{project}/locations/{location}/apis/{api}/versions/{version}/operations/{operation}`"
        },
        "definitions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. The definitions contained in the API version. These definitions will be added to the version when a new spec is added or when an existing spec is updated. Format is `projects/{project}/locations/{location}/apis/{api}/versions/{version}/definitions/{definition}`"
        },
        "deployments": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The deployments linked to this API version. Note: A particular API version could be deployed to multiple deployments (for dev deployment, UAT deployment, etc) Format is `projects/{project}/locations/{location}/deployments/{deployment}`"
        },
        "createTime": {
          "type": "string",
          "description": "Output only. The time at which the version was created.",
          "format": "date-time"
        },
        "updateTime": {
          "type": "string",
          "description": "Output only. The time at which the version was last updated.",
          "format": "date-time"
        },
        "lifecycle": {
          "$ref": "#/definitions/AttributeValues",
          "additionalProperties": true,
          "description": "Optional. The lifecycle of the API version. This maps to the following system defined attribute: `projects/{project}/locations/{location}/attributes/system-lifecycle` attribute. The number of values for this attribute will be based on the cardinality of the attribute. The same can be retrieved via GetAttribute API. All values should be from the list of allowed values defined for the attribute."
        },
        "compliance": {
          "$ref": "#/definitions/AttributeValues",
          "additionalProperties": true,
          "description": "Optional. The compliance associated with the API version. This maps to the following system defined attribute: `projects/{project}/locations/{location}/attributes/system-compliance` attribute. The number of values for this attribute will be based on the cardinality of the attribute. The same can be retrieved via GetAttribute API. All values should be from the list of allowed values defined for the attribute."
        },
        "accreditation": {
          "$ref": "#/definitions/AttributeValues",
          "additionalProperties": true,
          "description": "Optional. The accreditations associated with the API version. This maps to the following system defined attribute: `projects/{project}/locations/{location}/attributes/system-accreditation` attribute. The number of values for this attribute will be based on the cardinality of the attribute. The same can be retrieved via GetAttribute API. All values should be from the list of allowed values defined for the attribute."
        },
        "attributes": {
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValues",
            "additionalProperties": true
          },
          "type": "object",
          "description": "Optional. The list of user defined attributes associated with the Version resource. The key is the attribute name. It will be of the format: `projects/{project}/locations/{location}/attributes/{attribute}`. The value is the attribute values associated with the resource."
        },
        "selectedDeployment": {
          "type": "string",
          "description": "Optional. The selected deployment for a Version resource. This can be used when special handling is needed on client side for a particular deployment linked to the version. Format is `projects/{project}/locations/{location}/deployments/{deployment}`"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Version",
      "description": "Represents a version of the API resource in API hub. This is also referred to as the API version."
    }
  }
}