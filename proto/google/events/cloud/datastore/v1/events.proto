// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.events.cloud.datastore.v1;

import "google/events/cloud/datastore/v1/data.proto";
import "google/events/cloudevent.proto";

option csharp_namespace = "Google.Events.Protobuf.Cloud.Datastore.V1";
option php_namespace = "Google\\Events\\Cloud\\Datastore\\V1";
option ruby_package = "Google::Events::Cloud::Datastore::V1";
option (google.events.cloud_event_product) = "Cloud Firestore";
option (google.events.cloud_event_extension_attribute) = {
  name: "database"
  description: "The Firestore database name. The default database name is \"(default)\"."
};
option (google.events.cloud_event_extension_attribute) = {
  name: "namespace"
  description: "The Firestore database namespace. The default namespace is \"(default)\"."
};
option (google.events.cloud_event_extension_attribute) = {
  name: "entity"
  description: "Pattern to match for the resource."
};

// The CloudEvent is raised when a Firestore entity is created.
message EntityCreatedEvent {
  option (google.events.cloud_event_type) =
      "google.cloud.datastore.entity.v1.created";
  option (google.events.cloud_event_extension_name) = "database";
  option (google.events.cloud_event_extension_name) = "namespace";
  option (google.events.cloud_event_extension_name) = "entity";

  // The data associated with the event.
  EntityEventData data = 1;
}

// The CloudEvent is raised when a Firestore entity is updated.
message EntityUpdatedEvent {
  option (google.events.cloud_event_type) =
      "google.cloud.datastore.entity.v1.updated";
  option (google.events.cloud_event_extension_name) = "database";
  option (google.events.cloud_event_extension_name) = "namespace";
  option (google.events.cloud_event_extension_name) = "entity";

  // The data associated with the event.
  EntityEventData data = 1;
}

// The CloudEvent is raised when a Firestore entity is deleted.
message EntityDeletedEvent {
  option (google.events.cloud_event_type) =
      "google.cloud.datastore.entity.v1.deleted";
  option (google.events.cloud_event_extension_name) = "database";
  option (google.events.cloud_event_extension_name) = "namespace";
  option (google.events.cloud_event_extension_name) = "entity";

  // The data associated with the event.
  EntityEventData data = 1;
}

// The CloudEvent is raised when a Firestore entity is created, updated or
// deleted.
message EntityWrittenEvent {
  option (google.events.cloud_event_type) =
      "google.cloud.datastore.entity.v1.written";
  option (google.events.cloud_event_extension_name) = "database";
  option (google.events.cloud_event_extension_name) = "namespace";
  option (google.events.cloud_event_extension_name) = "entity";

  // The data associated with the event.
  EntityEventData data = 1;
}
